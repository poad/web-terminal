name: Node.js modules auto update and Docker Image push

on:
  workflow_dispatch:

jobs:
  configure:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Pull request auto merge enabler
      if: github.event_name == 'pull_request'
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.2
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH

  auto_update:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 14.x
      uses: actions/setup-node@v3.5.0
      with:
        node-version: 14.x
        check-latest: true

    - uses: poad/update-node-modules@v1.0.5
      with:
        path: ${{github.workspace}}/xtermjs/assets/base/webshell/
        yarn: true

    - uses: poad/update-node-modules@v1.0.5
      with:
        path: ${{github.workspace}}/xtermjs/assets/ts-node/webshell/
        yarn: true

    - name: Commit files
      run: |
        git config --local user.email "ken-yo@mbr.nifty.com"
        git config --local user.name "Kenji Saito"
        TIMESTAMP=$(date)
        BRANCH_NAME="feature/bump-modules-$(date "+%Y%m%d-%H%M%S")"
        git checkout -b "${BRANCH_NAME}"
        if [ $(git diff | wc -l) -eq 0 ]; then
          echo "CHANGE_STATE=no_changed" >> $GITHUB_ENV
          exit 0
        fi
        git add *
        git commit -m "Auto update at ${TIMESTAMP}"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
        echo "CHANGE_STATE=changed" >> $GITHUB_ENV

    - name: Push Changes
      if: success() && env.CHANGE_STATE == 'changed'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        branch: ${{ env.BRANCH_NAME }}

    - name: Prepare create pull request
      run: |
        repo=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        echo "REPO_NAME=${repo}" >> $GITHUB_ENV

    - name: Create pull request
      id: create-pull-request
      if: success() && env.CHANGE_STATE == 'changed'
      uses: poad/github-pull-requester@v1.0.1
      with:
        head_branch: ${{ env.BRANCH_NAME }}
        title: ${{ format('Auto update at {0}', env.TIMESTAMP) }}
        body: ${{ format('Update the modules at {0}', env.TIMESTAMP) }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ env.REPO_NAME }}
        owner: ${{ github.repository_owner }}

    - name: Extract response
      env:
        RESULT: ${{ steps.create-pull-request.outputs.result }}
        RESULT_JSON: ${{ toJSON(steps.create-pull-request.outputs.result) }}
      run: |
        PULL_REQUEST_HTML_URL=$(echo ${RESULT} | jq -r .data.html_url)
        echo "PULL_REQUEST_HTML_URL=${PULL_REQUEST_HTML_URL}" >> $GITHUB_ENV
        PULL_REQUEST_NUMBER=$(echo ${RESULT} | jq -r .data.number)
        echo "PULL_REQUEST_NUMBER=${PULL_REQUEST_NUMBER}" >> $GITHUB_ENV
        PULL_REQUEST_ID=$(echo ${RESULT} | jq -r .data.node_id)
        echo "PULL_REQUEST_ID=${PULL_REQUEST_ID}" >> $GITHUB_ENV

    - name: Send result with Pull Request
      if: success() && env.CHANGE_STATE == 'changed'
      uses: slackapi/slack-github-action@v1.23
      with:
        payload: "{ \"text\": \"${{ env.SLACKK_PAYLOAD }}\" }"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACKK_PAYLOAD: ${{ format('{0} {1}\nPull Request <{2}>', github.workflow, job.status, env.PULL_REQUEST_HTML_URL) }}

    - name: Send result without Pull Request
      if: success() && env.CHANGE_STATE == 'changed'
      uses: slackapi/slack-github-action@v1.23
      with:
        payload: "{ \"text\": \"${{ env.SLACKK_PAYLOAD }}\" }"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACKK_PAYLOAD: ${{ format('{0} {1}', github.workflow, job.status) }}

  docker_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          'xtermjs',
          'jshell',
          'jshell-gradle',
          'jshell-maven',
          'rust',
          'sbt-console',
          'swift',
          'ts-node'
        ]
    steps:
    - uses: actions/checkout@v3
      if: github.event_name == 'pull_request' && github.event_name != 'schedule'
    - name: Build ${{ matrix.target }}
      if: github.event_name == 'pull_request' && github.event_name != 'schedule'
      env:
        DOCKER_BUILDKIT: 1
      run: |
        CUR=$(pwd) && \
        cd xtermjs && \
        docker build --rm --target "${{ matrix.target }}" -t "poad/web-terminal:${{ matrix.target }}" . && \
        cd ${CUR}
    - name: Hadolint
      if: github.event_name == 'pull_request' && github.event_name != 'schedule'
      uses: brpaz/hadolint-action@master
      with:
        dockerfile: xtermjs/Dockerfile
  
  docker_push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          'xtermjs',
          'jshell',
          'jshell-gradle',
          'jshell-maven',
          'rust',
          'sbt-console',
          'swift',
          'ts-node'
        ]
    steps:
    - uses: actions/checkout@v3
      if: github.event_name != 'pull_request'
    - name: Build ${{ matrix.target }} and push
      if: github.event_name != 'pull_request'
      env:
        DOCKER_BUILDKIT: 1
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u poad --password-stdin && \
        CUR=$(pwd) && \
        cd xtermjs && \
        docker build --rm --target "${{ matrix.target }}" -t "poad/web-terminal:${{ matrix.target }}" . && \
        docker push "poad/web-terminal:${{ matrix.target }}" && \
        cd ${CUR}
